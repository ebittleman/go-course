Summer Coding 2015
Introduction to Go
18 Jun 2015
Tags: golang, intro

Eric Bittleman
Head of Software Development, Heyo
ebittleman@heyo.com
https://heyo.com

* About Me

*Experience*

I have been developing software professionally for the past 8 years. 6 of which were in a team lead or management role.

*Professional*Interests*

- Web Development
- Systems Administration and Automation
- B2B Integrations
- Organizational Development and Engineering

* What is Go?

Go, or golang is an open source programming language that has the aim of making systems and network programming easier.

*What*can*you*make*with*it?*

- Websites
- Games
- Mobile Apps
- Presentations
- ... pretty much anything

* 
** What are we doing today?
*** Schedule

- Warm up, Lets get our laptops setup!
- Part 1 - Hello World!
- Part 2 - Dig in to the rules (syntax) of the Go programming language
- Part 3 - You're going to help me fix my calculator
- Part 4 - If there's time, we'll add some new features to the blog

.image ./images/golang-logo.png _ 225

* 

** How's it going?

*** Tell me about camp

What's your favorite project so far?

.image ./images/golang-logo.png _ 225

* Tools We Are Going To Be Using

* Sublime Text With GoSublime Plugin

.image ./images/sublime-logo.jpg

*Used*For*Editting*Code*

Features

- Code Coloring - Makes it easier to read code
- Code Completetion - Will show you available functions and variables
- Auto Formatting - Makes sure your code is well formatted and readable 
- Automatically Imports Packages - automaically detects and imports go packages

*  Git Bash

.image ./images/git-logo.png _ 225

*Used*to*run*the*GO*SDK*and*use*GIT*

Features

- Windows version of the BASH Shell
- Auto Completion of Commands
- Shows Extra Git Information

* Go SDK

.image ./images/golang-logo.png _ 225

*Used*For*Managing*Your*Workspace*

Features

- Can Run Your Programs On The Fly
- Automatically Compiles Your Projects
- Runs Test
- Downloads Dependencies

* GO TO
** Part 1 - Hello World!

.link https://gocamp-2015.appspot.com/ https://gocamp-2015.appspot.com/

* Hello World
** Your first go program

.play code/helloworld.go

Go ahead, click run

* 
** The Breakdown
*** Packages

.code code/helloworld.go HLPKG

A *package* lets you group logically similar functionality into an easy to share library

*package*main* is a special package that Go looks for so that it can find *func*main()*

* 
** The Breakdown (continued)
*** func main()

.code code/helloworld.go HLFUNC

*main()* is a special function that tells Go where your program starts

It doesn't take any input and does not provide any output

* What's a function?

* This is a function

.play code/add.go /^func Add/,/^}/

A function is a piece of code that takes some sort of input, operates on it, then returns the result.

*How*To*Make*A*Function*In*Go*

1. Start with the *func* keyword
2. Give it a name, here we used *Add*
3. List the input arguments inside of parenthesis, here we have *(a*int,*b*int)*
4. Tell Go what type of data your function is going to return, in this case it's an, *int*
5. Code up the body in between some curlies *{*}*

* 
** The Breakdown (continued)
*** import "fmt"

.code code/helloworld.go HLIMPORT

The *import* keyword lets Go know that you want to use some functionality found in another package

Here we are importing *"fmt"* which has a lot of functions to help formatting strings

* 
** Quick Recap Before The Last Question

1. What is the purpose of a package?

2. How do we can we bring packages into our code?

3. What is a function? 

* 
** The Breakdown (the finale)
*** fmt.Println("Hello World")

.code code/helloworld.go HLFMT

What's this thing doing?

* Lets all make a "Hello World!" program

* 
** Step 1 - Start a new project

* 
** Step 2 - Add the project to Sublime Text

* 
** Step 3 - Add a main.go file to project

* 
** Step 4 - Write the program it with me

* 
** Step 5 - Lets try it out!

* End of Part 1. Questions?

* Part 2 - Lets Learn Go

* Basic Types

Go is a strongly typed language.

- bool
- int  int8  int16  int32  int64
- uint uint8 uint16 uint32 uint64 uintptr
- float32 float64
- string

Other notable types but not that important to cover today

- byte (an alias of uint8)
- rune
- complex64 complex128 (imaginary numbers)

* 
** Bool ... (true or false)

*Challenge*: Edit the code to make *falseBool* true and *trueBool* false

.play code/types/bool.go /^func BoolExample/,/^}/

* 
** Int ... Negative and Positive Integers

*Challenge*: Make one of the integers out of range and break the code!

.play code/types/int.go /var int8Max /,/9223372036854775808/

* 
** Unsigned Integers (uint) ... Only Positive Integers

*Challenge*: Make one of the integers negative and break the code!

.play code/types/uint.go /var uint8Max/,/uint64 = 0/

* 
** Floats ... Positive and Negative Numbers with decimal points

.play code/types/float.go /\/\/ Precision up to 8/,/float64 = 9223372036854775807/

* 
** Strings ... like text messages without emojis

*Challenge*: Edit the code to have the second Printf output "5 is number Five"

.play code/types/string.go /^func StringExample/,/^}/

For more details on formatting visit

.link https://golang.org/pkg/fmt/ https://golang.org/pkg/fmt/

* Variables

A variable is a value that can change.

There are a number of ways a variable can be declared and initialized in Go

.play code/variables.go /^func main/,/^}/

* 
** Basic Data Structures

A data structure is a specialized format for organizing and storing data. 

- arrays
- maps

* Arrays

An array is a simple ordered list of values of a single type

*Challenge*: Add the day I missed to the array

.play code/types/array.go /^func ArrayExample/,/^}/

* Maps

A *map* is a lot like an array, but with a *map* you can set what type the index is

*Challenge*: Edit the code to add the day I missed

.play code/types/map.go /^func MapExample/,/^}/

* Control Statements

* if/else

The *if* and *else* keywords are a conditional control statement that allows you to make decisions to do one thing or another

*Challenge*: Edit the code to make it print "This statement is true"

.play code/if.go  /^func main/,/^}/

* for loop

The *for* loop control statement that allows you to run the same code many times over changing variables

*Challenge*: Have the loop print up to 10

.play code/for/for1.go  /^func main/,/^}/

* for loop

*Challenge*: Add the Sun to the array and have it print out

.play code/for/for2.go  /^func main/,/^}/

* for loop with the len function

Here's how you read an array when you might not know the how many items are in it

.play code/for/for3.go  /^func main/,/^}/

* for loop with the range function

Here's a nice short hand way of looping over an array (or map)

.play code/for/for4.go  /^func main/,/^}/

* 
** Operators

Operators are symbols that allow you to do some sort of basic functionality on variables

They can do things like basic aritmitic, or logical operations

* Arithmetic Operators

*+*
  
  adds numbers, or when used with strings it combines (concatenates) them

*-*
  
  subtracts numbers
  
***
  
  multiplies numbers
  
*/* 
  
  divides numbers

* Arithmetic Example

.play code/operators/arithmetic.go  /^func main/,/^}/

* Logical Operators

These are typically used in if statements

*==*

  Evaluates to true if two values are equal

*!=*
  
  Evaluates to true if two vales are not equal

*>*
  
  Evaluates to true if the value on the right is greater than the value on the left

*<*
  
  Evaluates to true if the value on the right is less than the value on the left

* Logical Example
*Challenge*: Edit the code to make all the statements true

.play code/operators/logical.go  /^func main/,/^}/

* End of Part 2. Questions?

* Part 3 - Help me fix my calculator!

1. In Git Bash Run the following commands

  go get -u github.com/ebittleman/go-course
  cd $GOPATH/src/github.com/ebittleman/go-course
  go run main.go

2. Add the go-course project to SublimeText

3. Go to:

.link http://127.0.0.1:8080/ http://127.0.0.1:8080/

4. Help me fix my calculator!